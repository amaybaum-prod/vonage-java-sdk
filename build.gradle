plugins {
    id 'java-library'
    id 'jacoco'
    id 'signing'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = "com.vonage"
archivesBaseName = "client"
version = "7.3.0"
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

ext.githubPath = 'Vonage/vonage-java-sdk'

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'
    implementation 'io.openapitools.jackson.dataformat:jackson-dataformat-hal:1.0.9'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    implementation 'jakarta.servlet:jakarta.servlet-api:4.0.4'
    implementation 'com.vonage:jwt:1.0.2'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-inline:4.11.0'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.springframework:spring-test:5.3.26'
    testImplementation 'org.springframework:spring-web:5.3.31'
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

javadoc {
    /* info for JavaDoc options https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#overviewcomment */
    title "Vonage Java Server SDK"
    // uncomment this to use a custom javadoc overview
    //options.overview = file("src/main/javadoc/overview.html")
    // uncomment this to use the custom javadoc styles
    //options.stylesheetFile = file("src/main/javadoc/css/styles.css")
    //exclude "..."
    options.linkSource = true
}

jar {
    manifest {
        attributes(
            'Created-By': 'Vonage',
            'Implementation-Vendor': 'Vonage',
            'Implementation-Title': 'Vonage Java Server SDK',
            'Implementation-Version': archiveVersion
        )
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc
}
assemble.dependsOn javadocJar

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

jacoco {
    toolVersion = "0.8.8"
}
jacocoTestReport {
    reports {
        xml.getRequired().set(true)
        html.getRequired().set(true)
    }
}
check.dependsOn jacocoTestReport

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = "Vonage Java Server SDK"
                artifactId = 'client'
                packaging = 'jar'
                description = "Java client for Vonage APIs"
                url = "https://github.com/$githubPath"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://raw.github.com/$githubPath/main/LICENCE.txt"
                    }
                }
                developers {
                    developer {
                        id = "devrel"
                        name = "Vonage Devrel"
                        email = "devrel@vonage.com"
                    }
                }
                scm {
                    connection = "scm:git@github.com:Vonage/vonage-java-sdk"
                    developerConnection = "scm:git@github.com:Vonage/vonage-java-sdk"
                    url = "http://github.com:$githubPath"
                }
                issueManagement {
                    system = "GitHub"
                    url = "https://github.com/$githubPath/issues"
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("OSS_USERNAME")
            password = System.getenv("OSS_PASSWORD")
        }
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    def signingKey = System.getenv("signingKey")
    def signingPassword = System.getenv("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
